/**
 * Web Platform Wrapper for Unified BloomBeasts Game
 * This file wraps the unified game component for the Web platform
 */

// Set platform and import unified components
import { Platform, setPlatform, Binding, UIRenderer } from '../../../bloombeasts/ui';
import { BloomBeastsGame, type PlayerData } from '../../../bloombeasts/ui/screens';

// Import game manager
import { GameManager } from '../../../bloombeasts/gameManager';

// Set platform to Web
setPlatform(Platform.web);

/**
 * Web platform wrapper for the unified BloomBeasts game
 * This handles canvas rendering and web-specific initialization
 */
export class BloomBeastsWebGame {
  // Canvas and renderer
  private canvas: HTMLCanvasElement;
  private renderer: UIRenderer;

  // Game instance
  private game: BloomBeastsGame;
  private playerData = new Binding<PlayerData | null>(null);

  // Game manager
  private gameManager: GameManager | null = null;

  constructor(canvas: HTMLCanvasElement) {
    this.canvas = canvas;

    // Initialize renderer
    this.renderer = new UIRenderer(canvas);

    // Initialize the unified game
    this.game = new BloomBeastsGame({
      playerData: this.playerData,
      onButtonClick: this.handleButtonClick.bind(this),
      onCardSelect: this.handleCardSelect.bind(this),
      onMissionSelect: this.handleMissionSelect.bind(this),
      onSettingsChange: this.handleSettingsChange.bind(this),
      onBattleAction: this.handleBattleAction.bind(this)
    });

    // Subscribe to player data changes to trigger re-renders
    this.playerData.subscribe(() => {
      this.render();
    });
  }

  /**
   * Initialize the game
   */
  async initialize(): Promise<void> {
    console.log('[Web] BloomBeasts Game initializing...');

    // Initialize game manager with web platform
    this.gameManager = new GameManager();
    await this.gameManager.initialize(null); // Web doesn't have platform adapter yet

    // Load initial data
    const initialData = await this.loadPlayerData();
    if (initialData) {
      this.playerData.set(initialData);
    }

    // Initial render
    this.render();
  }

  /**
   * Load player data from game manager
   */
  private async loadPlayerData(): Promise<PlayerData | null> {
    if (!this.gameManager) {
      return null;
    }

    const stats = await this.gameManager.getMenuStats();
    const cards = await this.gameManager.getCardDisplay();
    const missions = await this.gameManager.getMissionDisplay();
    const settings = this.gameManager.soundManager?.getSettings() || {
      masterVolume: 50,
      musicVolume: 50,
      effectsVolume: 50,
      enabled: true,
      musicEnabled: true,
      effectsEnabled: true
    };

    return {
      currentScreen: 'menu',
      cards: {
        collected: cards.cards,
        deck: cards.deckCardIds
      },
      missions: missions.missions,
      stats: stats,
      settings: settings
    };
  }

  /**
   * Render the UI to canvas
   */
  private render(): void {
    // Get the UI tree from the unified game
    const uiTree = this.game.createUI();

    // Render to canvas
    this.renderer.render(uiTree);
  }

  /**
   * Handle button clicks from the unified UI
   */
  private async handleButtonClick(buttonId: string): Promise<void> {
    console.log('[Web] Button clicked:', buttonId);

    if (this.gameManager) {
      switch (buttonId) {
        case 'play':
          // Start battle
          const battle = await this.gameManager.startBattle('mission_1');
          if (battle) {
            const data = this.playerData.value;
            if (data) {
              data.currentScreen = 'battle';
              data.battleState = {
                state: 'in_progress',
                message: 'Battle started!'
              };
              this.playerData.set(data);
            }
          }
          break;
      }
    }
  }

  /**
   * Handle card selection
   */
  private async handleCardSelect(cardId: string): Promise<void> {
    console.log('[Web] Card selected:', cardId);

    if (this.gameManager) {
      await this.gameManager.toggleCardInDeck(cardId);

      // Refresh data
      const newData = await this.loadPlayerData();
      if (newData) {
        newData.currentScreen = 'cards'; // Stay on cards screen
        this.playerData.set(newData);
      }
    }
  }

  /**
   * Handle mission selection
   */
  private async handleMissionSelect(missionId: string): Promise<void> {
    console.log('[Web] Mission selected:', missionId);

    if (this.gameManager) {
      const battle = await this.gameManager.startBattle(missionId);
      if (battle) {
        const data = this.playerData.value;
        if (data) {
          data.currentScreen = 'battle';
          data.battleState = {
            state: 'in_progress',
            message: `Starting mission: ${missionId}`
          };
          this.playerData.set(data);
        }
      }
    }
  }

  /**
   * Handle settings change
   */
  private handleSettingsChange(settingId: string, value: any): void {
    console.log('[Web] Settings changed:', settingId, value);

    if (this.gameManager?.soundManager) {
      if (settingId === 'reset') {
        // Reset all settings
        this.gameManager.soundManager.updateSettings(value);
      } else {
        // Update individual setting
        const currentSettings = this.gameManager.soundManager.getSettings();
        currentSettings[settingId] = value;
        this.gameManager.soundManager.updateSettings(currentSettings);
      }

      // Save settings to localStorage
      localStorage.setItem('bloombeasts_settings', JSON.stringify(this.gameManager.soundManager.getSettings()));
    }
  }

  /**
   * Handle battle action
   */
  private async handleBattleAction(action: string): Promise<void> {
    console.log('[Web] Battle action:', action);

    if (this.gameManager) {
      // Handle battle actions
      // This would integrate with your battle system
    }
  }

  /**
   * Handle canvas resize
   */
  resize(width: number, height: number): void {
    this.canvas.width = width;
    this.canvas.height = height;
    this.render();
  }

  /**
   * Cleanup
   */
  dispose(): void {
    console.log('[Web] BloomBeasts Game disposing...');
    this.game.dispose();
    this.renderer.dispose();
  }
}

/**
 * Helper function to create and initialize the game
 */
export function createWebGame(canvasId: string): BloomBeastsWebGame | null {
  const canvas = document.getElementById(canvasId) as HTMLCanvasElement;
  if (!canvas) {
    console.error(`Canvas with id '${canvasId}' not found`);
    return null;
  }

  const game = new BloomBeastsWebGame(canvas);
  game.initialize();

  // Handle window resize
  window.addEventListener('resize', () => {
    game.resize(window.innerWidth, window.innerHeight);
  });

  return game;
}